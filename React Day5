*********App.js********

import React,{useState} from "react";

import ChildA from './ChildA';
import ChildB from './ChildB';

const Parent=()=>{
  const[count, setCount]=useState(0);
  const increment =()=>{
    setCount(c=>c+1)
  };
  return(
    <div>
      <ChildA/>
      <ChildB count={count} increment={increment}/>
    </div>
  );
};

export default Parent;

********ChildA.js**********


const ChildA=()=>{
    console.log("Child A rendered");
    return(
            <h2>This is Child A</h2>
    );
};

export default ChildA;

********ChildB.js*********

const ChildB=({count, increment})=>{
    console.log("ChildB rendered");
    return(
        <div>
            <h1>Count:{count}</h1>
            <button onClick={increment}>Increment</button>
        </div>
    );
};

export default ChildB;


React Memoization:
->makes apps faster by remembering the result
->it is a HOC(high order component) is not a react hook.
->it will stop unnecessary rendering of functional components of its props.
->it will improve the performance of the functional components.

---useMemo():- useMemo hook to store the functions
Ex:- E-commerce search by using memorization:
